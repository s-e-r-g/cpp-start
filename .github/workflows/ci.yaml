name: CI (CMake • GCC/Clang/MSVC)

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  build:
    name: ${{ matrix.os }} • ${{ matrix.compiler }} • Release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            compiler: gcc
            cc: gcc
            cxx: g++
          - os: ubuntu-latest
            compiler: clang
            cc: clang
            cxx: clang++
          # Windows
          - os: windows-latest
            compiler: msvc
          - os: windows-latest
            compiler: clang-cl
          # macOS
          - os: macos-latest
            compiler: clang
            cc: clang
            cxx: clang++

    env:
      CMAKE_BUILD_TYPE: Release
      CTEST_OUTPUT_ON_FAILURE: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install build tools (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build $([[ "${{ matrix.compiler }}" == "gcc" ]] && echo "gcc g++" || echo "clang")

      - name: Install Ninja (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          brew install ninja || true

      - name: Enable MSVC env (Windows)
        if: startsWith(matrix.os, 'windows')
        uses: ilammy/msvc-dev-cmd@v1

      - name: Configure
        shell: bash
        run: |
          # Avoid leaking a toolset/generator from the environment
          unset CMAKE_GENERATOR_TOOLSET || true
          unset CMAKE_GENERATOR || true

          if [[ "${{ matrix.os }}" == "windows-latest" && "${{ matrix.compiler }}" == "clang-cl" ]]; then
            # Visual Studio generator is required for -T ClangCL
            cmake -S . -B build -G "Visual Studio 17 2022" -A x64 -T ClangCL
          else
            if [[ -n "${{ matrix.cc }}" ]]; then export CC=${{ matrix.cc }}; fi
            if [[ -n "${{ matrix.cxx }}" ]]; then export CXX=${{ matrix.cxx }}; fi
            cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE}"
          fi

      - name: Build
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" && "${{ matrix.compiler }}" == "clang-cl" ]]; then
            # No extra MSBuild args — avoid duplicate 'v:m'
            cmake --build build --config "${CMAKE_BUILD_TYPE}" --parallel
          else
            cmake --build build --config "${CMAKE_BUILD_TYPE}" -- -v
          fi

      - name: Test
        shell: bash
        working-directory: build
        run: ctest -C "${CMAKE_BUILD_TYPE}" --output-on-failure
